.. This work is licensed under a Creative Commons Attribution 4.0 International License.
.. http://creativecommons.org/licenses/by/4.0
.. _tls_enablement:

TLS Support
===========

Beginning with the London release, ONAP is using a service mesh (Istio) to encrypt and authenticate traffic between ONAP components.  In earlier releases, each component was responsible for protecting its HTTP interfaces with TLS,
using certificates generated by the (now obsolete) AAF component.   Some DCAE components offer HTTP interfaces to clients outside the ONAP Kubernetes cluster.  Some ONAP installations will use an Istio Gateway to terminate TLS, but other
installations may terminate TLS on the components that are exposing external HTTP interfaces.   For the latter case, ONAP offers a mechanism to allow components to obtain TLS certificates from an external source using the CMPv2 protocol.


External TLS Support - using Cloudify (OBSOLETE)
------------------------------------------------
**Note: Cloudify is no longer used to deploy DCAE microservices.  Some of the information in this section
may still be useful for understanding how external TLS certificates are supported in ONAP.   See the section
below for instructions on using external TLS with Helm deployments.**

External TLS support was introduced in order to integrate DCAE with CertService to acquire operator certificates meant to protect external traffic between DCAE's components (VES collector, HV-VES, RestConf collector and DFC) and xNFs. For that reason K8s plugin which creates K8s resources from Cloudify blueprints was enhanced with new TLS properties support. New TLS properties are meant to control CertService's client call in init containers section and environment variables which are passed to it.

This external TLS support doesn't influence ONAP internal traffic which is protected by certificates issued by AAF's CertMan. External TLS Support was introduced in k8splugin 3.1.0.

From k8splugin 3.4.1 when external TLS is enabled (use_external_tls=true), keystore contains only certificate from CMPv2 server. Keystore issued by CertMan has appended .bak extension and is not used.

1. Certificate setup:

   To create certificate artifacts, OOM CertService must obtain the certificate details. Common name and list of Subject Alternative Names (SANs) are set in blueprint as described in step 3.
   The following parameters with default values are stored in OOM in k8splugin configuration file (k8splugin.json) in group ``external_cert``:

       * A string ``image_tag`` that indicates CertService client image name and version
       * A string ``request_url`` that indicates URL to Cert Service API
       * A string ``timeout`` that indicates request timeout.
       * A string ``country`` that indicates country name in ISO 3166-1 alpha-2 format, for which certificate will be created
       * A string ``organization`` that indicates organization name, for which certificate will be created.
       * A string ``state`` that indicates state name, for which certificate will be created.
       * A string ``organizational_unit`` that indicates organizational unit name, for which certificate will be created.
       * A string ``location`` that indicates location name, for which certificate will be created.
       * A string ``keystore_password`` that indicates keystore password.
       * A string ``truststore_password`` that indicates truststore password.

   Group ``external_cert`` from k8splugin.json with default values:

   .. code-block:: JSON

        {
          "image_tag": "nexus3.onap.org:10001/onap/org.onap.oom.platform.certservice.oom-certservice-client:$VERSION",
          "request_url": "https://oom-cert-service:8443/v1/certificate/",
          "timeout":  "30000",
          "country": "US",
          "organization": "Linux-Foundation",
          "state": "California",
          "organizational_unit": "ONAP",
          "location": "San-Francisco",
          "keystore_password": "secret",
          "truststore_password": "secret"
        }


   Parameters configured in k8splugin are propagated via Helm Charts to Kubernetes ConfigMap and finally they are transfered to Consul.
   Blueprint, during start of execution, reads k8splugin.json configuration from Consul and applies it.

2. Certificate generation and retrieval:

   When a DCAE component that needs an external TLS certificate is launched, a Kubernetes init container runs before the main
   component container is launched.  The init container contacts the OOM CertService.

   DCAE service components (sometimes called "microservices") are deployed via Cloudify using blueprints.  This is described
   in more detail in the next section.

3. Plugin and Blueprint:
   The blueprint for a component that needs an external TLS certificate needs to include the node property called "external_cert" in
   the node properties for the component. The property is a dictionary with following elements:

       * A boolean (``use_external_tls``) that indicates whether the component uses TLS in external traffic.
       * A string (``external_cert_directory``) that indicates where the component expects to find  operator certificate and trusted certs.
       * A string (``ca_name``) that indicates name of Certificate Authority configured on CertService side (in cmpServers.json).
       * A string (``output_type``) that indicates certificate output type.
       * A dictionary (``external_certificate_parameters``) with two elements:
           * A string (``common_name``) that indicates common name which should be present in certificate. Specific for every blueprint (e.g. dcae-ves-collector for VES).
           * A string (``sans``) that indicates list of Subject Alternative Names (SANs) which should be present in certificate. Delimiter - , Should contain common_name value and other FQDNs under which given component is accessible. The following SANs types are supported: DNS names, IPs, URIs, emails.

   As a final step of the plugin the generated CMPv2 truststore entries will be appended to AAF CA truststore (see certificate artifacts below).

   Example

   .. code-block:: yaml

        external_cert:
            external_cert_directory: /opt/app/dcae-certificate/
            use_external_tls: true
            ca_name: "RA"
            cert_type: "P12"
            external_certificate_parameters:
                common_name: "simpledemo.onap.org"
                sans: "simpledemo.onap.org,ves.simpledemo.onap.org,ves.onap.org"

   For this example the certificates are mounted into ``/opt/app/dcae-certificate/external`` directory within the container.

   During deployment Kubernetes plugin (referenced in blueprint) will check if the ``external_cert`` property is set and ``use_external_tls`` is set to true, then the plugin will add some elements to the Kubernetes Deployment for the component:
          * A Kubernetes volume (``tls-volume``) that will hold the certificate artifacts
          * A Kubernetes initContainer (``cert-service-client``)
          * A Kubernetes volumeMount for the initContainer that mounts the ``tls-volume`` volume at ``/etc/onap/oom/certservice/certs/``.
          * A Kubernetes volumeMount for the main container that mounts the ``tls-info`` volume at the mount point specified in the ``external_cert_directory`` property.

   Kurbernetes volumeMount tls-info is shared with TLS init container for internal traffic.

4. Certificate artifacts

    The certificate directory mounted on the container will include the following:
        * Directory ``external`` with files:
            * ``keystore.p12``: A keystore containing the operator certificate.
            * ``keystore.pass``: A text file with a single line that contains the password for the ``keystore.p12`` keystore.
            * ``truststore.p12``: A truststore containing the operator certificate.  (Needed by clients that access TLS-protected servers in external traffic.)
            * ``truststore.pass``: A text file with a single line that contains the password for the ``truststore.p12`` keystore.
        * ``trust.jks``:  A file with the AAF CA certificate and CMPv2 certificate with private key packaged in Java form.
        * ``trust.jks.bak``:  The (original) file with the AAF CA certificate only.
        * ``trust.pass``: A text file with a single line that contains the password for ``trust.jks`` and ``trust.jks.bak`` file.
        * ``cacert.pem``: The AAF CA certificate, in PEM form.

.. _external-tls-helm:

External TLS Support - Helm based deployment
--------------------------------------------

CMPv2 certificates can be enabled and configured via helm values. The feature is switched on only when:
    * ``global.cmpv2Enabled`` flag is set to true
    * ``certDirectory`` directory where TLS certs should be stored is set (in a specific component)
    * flag ``useCmpv2Certificates`` is set to true (in a specific component)

Default values for certificates are defined in ``global.certificate.default`` and can be overriden during onap installation process.

    .. code-block:: yaml

      global:
        certificate:
          default:
            renewBefore: 720h #30 days
            duration:    8760h #365 days
            subject:
              organization: "Linux-Foundation"
              country: "US"
              locality: "San-Francisco"
              province: "California"
              organizationalUnit: "ONAP"
            issuer:
              group: certmanager.onap.org
              kind: CMPv2Issuer
              name: cmpv2-issuer-onap

CMPv2 settings can be changed in Helm values.
    * ``mountPath`` - the directory within the container where certificates should be mounted
    * ``commonName`` - indicates common name which should be present in certificate
    * ``dnsNames`` - list of DNS names which should be present in certificate
    * ``ipAddresses`` - list of IP addresses which should be present in certificate
    * ``uris`` - list of uris which should be present in certificate
    * ``emailAddresses`` - list of email addresses which should be present in certificate
    * ``outputType`` - indicates certificate output type (jks or p12)

    .. code-block:: yaml

      certificates:
      - mountPath: <PATH>
        commonName: <COMMON-NAME>
        dnsNames:
          - <DNS-NAME-1>
          - <DNS-NAME-2>
          ...
        ipAddresses:
          ...
        uris:
          ...
        emailAddresses:
          ...
        keystore:
          outputType:
            - <OUTPUT-TYPE>
          passwordSecretRef:
            name: <SECRET-NAME>
            key: <PASSWORD-KEY>
            create: <SHOULD-CREATE>

The values can be changed by upgrading a component with modified values, eg.

    .. code-block:: bash

        helm -n onap upgrade <deploymant name> --values <path to updated values>
